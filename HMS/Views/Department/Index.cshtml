@model IEnumerable<HMS.Models.Department>

@{
    ViewData["Title"] = "Departments";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Departments</h1>

<p>
    <a asp-action="Create" class="btn btn-primary mb-3">Create New</a>
</p>

<!-- Search Form -->
<form asp-action="Index" method="get" class="mb-3 d-flex">
    <input type="text" name="searchName" placeholder="Enter department name" class="form-control me-2" value="" />
    <button type="submit" class="btn btn-outline-secondary me-2">Search</button>
    <button type="submit" formaction="@Url.Action("Index")" class="btn btn-outline-danger">Reset</button>
</form>

<!-- Sorting Buttons -->
<div class="d-flex mb-3">
    <button class="btn btn-success me-2" onclick="sortTable('departmentTable', true)">Sort Ascending</button>
    <button class="btn btn-warning" onclick="sortTable('departmentTable', false)">Sort Descending</button>
</div>

<table id="departmentTable" class="table table-bordered table-striped">
    <thead class="table-dark">
        <tr>
            <th>@Html.DisplayNameFor(model => model.Id)</th>
            <th>@Html.DisplayNameFor(model => model.Name)</th>
            <th>@Html.DisplayNameFor(model => model.HeaOfDepartment)</th>
            <th>@Html.DisplayNameFor(model => model.ContactNumbers)</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Id)</td>
                <td>@Html.DisplayFor(modelItem => item.Name)</td>
                <td>@Html.DisplayFor(modelItem => item.HeaOfDepartment)</td>
                <td>@Html.DisplayFor(modelItem => item.ContactNumbers)</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm me-2">
                        <i class="bi bi-pencil-square"></i> Edit
                    </a>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm me-2">
                        <i class="bi bi-eye"></i> View
                    </a>
                    <a asp-action="DeleteDepartment" asp-route-id="@item.Id" class="btn btn-danger btn-sm">
                        <i class="bi bi-trash"></i> Delete
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

<nav>
    <ul class="pagination justify-content-center" id="paginationControls">
        <!-- Pagination items will be dynamically inserted here -->
    </ul>
</nav>

<script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function () {
        const rowsPerPage = 5; // Number of rows to display per page
        const table = document.getElementById("departmentTable").getElementsByTagName("tbody")[0];
        const rows = table.getElementsByTagName("tr");
        const totalPages = Math.ceil(rows.length / rowsPerPage);
        const paginationControls = document.getElementById("paginationControls");

        function displayPage(page) {
            // Hide all rows
            for (let i = 0; i < rows.length; i++) {
                rows[i].style.display = "none";
            }

            // Calculate the start and end index for the rows to show
            const start = (page - 1) * rowsPerPage;
            const end = Math.min(start + rowsPerPage, rows.length);

            // Show rows for the current page
            for (let i = start; i < end; i++) {
                rows[i].style.display = "table-row";
            }
        }

        function setupPagination() {
            // Create pagination buttons
            for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement("li");
                li.className = "page-item";
                const a = document.createElement("a");
                a.className = "page-link";
                a.href = "#";
                a.textContent = i;
                a.addEventListener("click", function (e) {
                    e.preventDefault();
                    displayPage(i);
                    updateActivePage(i);
                });
                li.appendChild(a);
                paginationControls.appendChild(li);
            }

            // Display the first page by default
            displayPage(1);
            updateActivePage(1);
        }

        function updateActivePage(page) {
            // Remove active class from all pagination items
            const pageItems = paginationControls.getElementsByClassName("page-item");
            for (let i = 0; i < pageItems.length; i++) {
                pageItems[i].classList.remove("active");
            }

            // Add active class to the current page item
            pageItems[page - 1].classList.add("active");
        }

        setupPagination();
    });
</script>

<script>
    function sortTable(tableId, isAscending) {
        var table = document.getElementById(tableId);
        var tbody = table.tBodies[0];
        var rows = Array.from(tbody.querySelectorAll("tr"));

        rows.sort(function (a, b) {
            var cellA = a.children[1].innerText.toLowerCase(); // Sort by the 'Name' column (index 1)
            var cellB = b.children[1].innerText.toLowerCase();

            if (!isNaN(cellA) && !isNaN(cellB)) {
                cellA = parseFloat(cellA);
                cellB = parseFloat(cellB);
            }

            if (isAscending) {
                return cellA > cellB ? 1 : cellA < cellB ? -1 : 0;
            } else {
                return cellA < cellB ? 1 : cellA > cellB ? -1 : 0;
            }
        });

        // Update the table with the sorted rows
        rows.forEach(function (row) {
            tbody.appendChild(row);
        });
    }
</script>
